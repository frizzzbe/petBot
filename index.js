require('dotenv').config();

const TelegramBot = require("node-telegram-bot-api");
const admin = require("firebase-admin");
const fs = require("fs");
const serviceAccount = require("./db-access.json");

// Internal dependencies
const { COMMANDS, DEFAULT_BUKASHKA, ADVENTURES } = require('./config/constants');
const { 
  getFeedResult,
  normalizeCommand,
  sendBukashkaInfo 
} = require('./config/actions');
const { formatTimeLeft, formatMessage } = require('./utils/helpers');
const BukashkaManager = require('./config/BukashkaManager');
const { TEXT } = require('./config/text');

// Firebase initialization
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: process.env.FIREBASE_KEY_URL
});

// Database references
const db = admin.database();
const rootRef = db.ref('/');
const petsRef = db.ref('pets');

const bot = new TelegramBot(process.env.API_KEY_BOT, {
  polling: true,
});

const bukashkaManager = new BukashkaManager(bot);

//–ú–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –¥–ª—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
const commands = [
  { command: "start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
  { command: "help", description: "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏" },
];

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
bot.setMyCommands(COMMANDS);

bot.on("text", async (msg) => {
  try {
    const userRequest = normalizeCommand(msg.text);

    if (msg.text === "/start") {
      await bot.sendMessage(msg.chat.id, formatMessage(TEXT.START.WELCOME), {
        reply_markup: {
          keyboard: [
            ["‚≠êÔ∏è –í–∑—è—Ç—å –±—É–∫–∞—à–∫—É", "‚≠êÔ∏è –ü–æ–∫–æ—Ä–º–∏—Ç—å"],
            ["‚≠êÔ∏è –ú–æ—è –±—É–∫–∞—à–∫–∞", "‚ùì –ì–¥–µ –±—É–∫–∞—à–∫–∞"],
            ["üéí –ë—É–∫–∞—à–∫—É –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ", "üíÄ –†–∞–∑–¥–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫—É"]
          ],
          resize_keyboard: true,
        },
        parse_mode: "MarkdownV2"
      });
    } else if (msg.text === "/help") {
      await bot.sendMessage(msg.chat.id, formatMessage(TEXT.HELP), {
        parse_mode: "MarkdownV2"
      });
    } else if (userRequest === "–≤–∑—è—Ç—å –±—É–∫–∞—à–∫—É") {
      const userId = msg.from.id;
      const existingBukashka = await bukashkaManager.getBukashka(userId);
      if (existingBukashka) {
        await bot.sendMessage(
          msg.chat.id,
          formatMessage(TEXT.STATUS.ALREADY_EXISTS),
          { parse_mode: "MarkdownV2" }
        );
        return;
      }

      await bot.sendMessage(
        msg.chat.id,
        formatMessage(TEXT.START.NEW_BUKASHKA),
        { parse_mode: "MarkdownV2" }
      );

      bot.once("message", async (nameMsg) => {
        const buakakaName = nameMsg.text;
        await bukashkaManager.createBukashka(userId, msg.chat.id, buakakaName, DEFAULT_BUKASHKA);

        await bot.sendMessage(
          msg.chat.id,
          formatMessage(TEXT.START.CONGRATULATIONS(buakakaName)),
          { parse_mode: "MarkdownV2" }
        );
      });
    } else if (userRequest === "–ø–æ–∫–æ—Ä–º–∏—Ç—å") {
      const userId = msg.from.id;
      const bukashka = await bukashkaManager.getBukashka(userId);
      if (!bukashka) {
        await bukashkaManager.emptyPetMsg(msg.chat.id);
        return;
      }

      if (bukashka.isAdventuring) {
        await bot.sendMessage(
          msg.chat.id,
          formatMessage(TEXT.FEED.IN_ADVENTURE),
          { parse_mode: "MarkdownV2" }
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 3 —Å–µ–∫—É–Ω–¥—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
      const now = Date.now();
      const lastFeed = bukashkaManager.lastFeedTime[userId] || 0;

      if (now - lastFeed < 3000) {
        const remainingTime = Math.ceil((3000 - (now - lastFeed)) / 1000);
        await bot.sendMessage(
          msg.chat.id,
          formatMessage(TEXT.FEED.WAIT(remainingTime)),
          { parse_mode: "MarkdownV2" }
        );
        return;
      }

      try {
        const feedResult = getFeedResult(bukashka.name);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
        bukashkaManager.lastFeedTime[userId] = now;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—ã—Ç–æ—Å—Ç—å –∏ —Å—á–∞—Å—Ç—å–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const newFeed = Math.max(0, Math.min(100, bukashka.feed + feedResult.amount));
        const newHappy = Math.max(0, Math.min(100, bukashka.happy + feedResult.happiness));

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await bukashkaManager.petsRef.child(userId).update({
          feed: newFeed,
          happy: newHappy,
          lastFeedTime: now
        });

        try {
          await bot.sendMessage(msg.chat.id, formatMessage(feedResult.message), {
            parse_mode: "MarkdownV2",
          });
        } catch (error) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
          await bot.sendMessage(msg.chat.id, feedResult.message.replace(/\\/g, ''));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–º–µ—Ä–ª–∞ –ª–∏ –±—É–∫–∞—à–∫–∞ –æ—Ç –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ–π –µ–¥—ã
        if (newFeed === 0 && feedResult.type === "–≥–æ–≤–Ω—è—à–∫–∞") {
          await bukashkaManager.killBukashka(userId, msg.chat.id, "–ü–æ–µ–ª–∞ –≥–æ–≤–Ω–∞ –∏ –ø–æ–º–µ—Ä–ª–∞ üò¢");
          return;
        }
      } catch (error) {
        console.error('Error while feeding:', error);
        await bot.sendMessage(msg.chat.id, TEXT.FEED.ERROR);
      }
    } else if (userRequest === "–º–æ—è –±—É–∫–∞—à–∫–∞") {
      const userId = msg.from.id;
      const bukashka = await bukashkaManager.getBukashka(userId);
      if (bukashka) {
        await sendBukashkaInfo(msg.chat.id, bukashka, 0, 0, bot);
      } else {
        await bukashkaManager.emptyPetMsg(msg.chat.id);
      }
    } else if (userRequest === "–±—É–∫–∞—à–∫—É –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ") {
      const userId = msg.from.id;
      const bukashka = await bukashkaManager.getBukashka(userId);
      if (!bukashka) {
        await bukashkaManager.emptyPetMsg(msg.chat.id);
        return;
      }

      if (bukashkaManager.isInAdventure(userId)) {
        const timeLeft = bukashkaManager.getAdventureTimeLeft(userId);
        await bot.sendMessage(
          msg.chat.id,
          formatMessage(TEXT.ADVENTURE.IN_PROGRESS(bukashka.name, formatTimeLeft(timeLeft))),
          { parse_mode: "MarkdownV2" }
        );
        return;
      }

      if (bukashka.feed < 10) {
        const keyboard = {
          inline_keyboard: [
            [
              { text: "–†–∏—Å–∫–Ω—É—Ç—å", callback_data: "adventure_risk" },
              { text: "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data: "adventure_cancel" }
            ]
          ]
        };

        await bot.sendMessage(
          msg.chat.id,
          formatMessage(TEXT.ADVENTURE.LOW_FEED),
          {
            parse_mode: "MarkdownV2",
            reply_markup: keyboard
          }
        );
        return;
      }

      await bukashkaManager.startAdventure(msg.chat.id, ADVENTURES);
    } else if (userRequest === "–≥–¥–µ –±—É–∫–∞—à–∫–∞") {
      const userId = msg.from.id;
      const bukashka = await bukashkaManager.getBukashka(userId);
      if (!bukashka) {
        await bukashkaManager.emptyPetMsg(msg.chat.id);
        return;
      }

      const isAdventuring = bukashkaManager.isInAdventure(userId);
      const timeLeft = isAdventuring ? bukashkaManager.getAdventureTimeLeft(userId) : 0;

      await bot.sendMessage(
        msg.chat.id,
        formatMessage(TEXT.ADVENTURE.LOCATION(bukashka.name, isAdventuring, formatTimeLeft(timeLeft))),
        { parse_mode: "MarkdownV2" }
      );
    } else if (userRequest === "—Ä–∞–∑–¥–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫—É") {
      const userId = msg.from.id;
      const bukashka = await bukashkaManager.getBukashka(userId);
      if (bukashka) {
        await bukashkaManager.killBukashka(userId, msg.chat.id, "—Ä–∞–∑–¥–∞–≤–ª–µ–Ω–∞ —Ö–æ–∑—è–∏–Ω–æ–º");
      } else {
        await bukashkaManager.emptyPetMsg(msg.chat.id);
      }
    } else {
      //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ
      const msgWait = await bot.sendMessage(
        msg.chat.id,
        `–ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...`
      );

      //–ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç—É–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç—Ö–æ-–±–æ—Ç)
      setTimeout(async () => {
        await bot.editMessageText(msg.text, {
          chat_id: msgWait.chat.id,
          message_id: msgWait.message_id,
        });
      }, 2000);
    }
  } catch (error) {
    console.error(error);
  }
});

bot.on("photo", async (msg) => {
  try {
    const userId = msg.from.id;
    const photo = msg.photo[msg.photo.length - 1];
    const bukashka = await bukashkaManager.getBukashka(userId);

    if (bukashka) {
      bukashka.image = photo.file_id;
      await sendBukashkaInfo(msg.chat.id, bukashka, 0, 0, bot);
    } else {
      await bukashkaManager.emptyPetMsg(msg.chat.id);
    }
  } catch (error) {
    console.error(error);
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const bukashka = await bukashkaManager.getBukashka(chatId);

  if (!bukashka) {
    bot.answerCallbackQuery(query.id, { text: TEXT.STATUS.NO_BUKASHKA });
    return;
  }

  if (query.data === "adventure_risk") {
    bot.answerCallbackQuery(query.id);
    await bukashkaManager.startAdventure(chatId, ADVENTURES);
  } else if (query.data === "adventure_cancel") {
    bot.answerCallbackQuery(query.id);
    bot.deleteMessage(chatId, query.message.message_id);
    await bot.sendMessage(
      chatId,
      formatMessage(TEXT.ADVENTURE.CANCEL(bukashka.name)),
      { parse_mode: "MarkdownV2" }
    );
  }
});
