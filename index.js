require('dotenv').config();

const TelegramBot = require("node-telegram-bot-api");
const admin = require("firebase-admin");
const serviceAccount = require("./db-access.json");

const PetManager = require('./config/PetManager');
const { COMMANDS, DEFAULT_BUKASHKA, ADVENTURES, INTERVALS, STICKERS, SHOP_PRICES } = require('./config/constants');
const { TEXT } = require('./config/text');
const {
  getFeedResult,
  normalizeCommand,
  sendBukashkaInfo,
  checkInterval,
  handleGameAction
} = require('./config/actions');
const { formatTimeLeft, formatMessage, getBukashkaLevel } = require('./utils/helpers');

// Firebase initialization
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: process.env.FIREBASE_KEY_URL
});

const bot = new TelegramBot(process.env.API_KEY_BOT, {
  polling: true,
});

const petObject = new PetManager(bot);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π cron –¥–ª—è batch-–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ–¥–∞–Ω–∏—è –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π
const db = admin.database();
const petsRef = db.ref('pets');

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
const waitingForPhoto = {};
// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
const waitingForName = {};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
PetManager.checkAndFinishAdventures(bot, petsRef);

setInterval(async () => {
  await PetManager.batchFeedDecay(bot, petsRef);
  await PetManager.batchCompleteAdventures(bot, petsRef);
}, INTERVALS.FEED_DECAY); // —Ä–∞–∑ –≤ 15 –º–∏–Ω—É—Ç

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
bot.setMyCommands(COMMANDS);

bot.on("text", async (msg) => {
  try {
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const userName = msg.from.username;
    const userRequest = normalizeCommand(msg.text);
  
    if (["/start", "/start@bukashki_pet_bot"].includes(msg.text)) {
      await bot.sendMessage(chatId, formatMessage(TEXT.START.WELCOME), {
        parse_mode: "MarkdownV2"
      });
    } else if (["/menu", "/menu@bukashki_pet_bot"].includes(msg.text)) {
      // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await bot.deleteMessage(chatId, msg.message_id);
      const sent = await bot.sendMessage(chatId, "–í—ã –æ—Ç–∫—Ä—ã–ª–∏ /menu", {
        reply_markup: {
          keyboard: [
            ["‚≠êÔ∏è –ü–æ–∫–æ—Ä–º–∏—Ç—å", "‚≠êÔ∏è –ú–æ—è –±—É–∫–∞—à–∫–∞"],
            ["‚ùì –ì–¥–µ –±—É–∫–∞—à–∫–∞", "üéí –ë—É–∫–∞—à–∫—É –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ"],
            ["üé≤ –ü–æ–∏–≥—Ä–∞—Ç—å", "üè™ –ú–∞–≥–∞–∑–∏–Ω"],
            ["üíÄ –†–∞–∑–¥–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫—É", "–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"]
          ],
          resize_keyboard: true,
        }
      });
      return;
    } else if (msg.text === "z") {
      await bot.sendMessage(chatId, formatMessage(`–í–∞—Å z–æ–≤—É—Ç @${userName}`), {
        parse_mode: "MarkdownV2"
      });
      return;
    } else if (msg.text === "–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é") {
      // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await bot.deleteMessage(chatId, msg.message_id);
      const sent = await bot.sendMessage(chatId, "–í—ã –∑–∞–∫—Ä—ã–ª–∏ –º–µ–Ω—é", {
        reply_markup: {
          remove_keyboard: true
        }
      });
        bot.deleteMessage(chatId, sent.message_id).catch(() => {});

      return;
    } else if (["/help", "/help@bukashki_pet_bot"].includes(msg.text)) {
      await bot.sendMessage(chatId, formatMessage(TEXT.HELP), {
        parse_mode: "MarkdownV2"
      });
    } else if (["/img", "/img@bukashki_pet_bot"].includes(msg.text)) {
      const bukashka = await petObject.getBukashka(userId);
      if (!bukashka) {
        await petObject.emptyPetMsg(chatId);
        return;
      }
      waitingForPhoto[userId] = true;
      await bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –≤–∞—à–µ–π –±—É–∫–∞—à–∫–∏.");
    } else if (userRequest === "–≤–∑—è—Ç—å –±—É–∫–∞—à–∫—É" || ["/take@bukashki_pet_bot", "/take"].includes(msg.text)) {
      const pet = await petObject.getBukashka(userId);
      if (pet) {
        await bot.sendMessage(
          chatId,
          formatMessage(TEXT.STATUS.ALREADY_EXISTS),
          { parse_mode: "MarkdownV2" }
        );
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –≥–æ–ª–æ–¥–∞–Ω–∏—è –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±—É–∫–∞—à–∫–∏
        petObject.startFeedTimer(userId, chatId);
        return;
      }

      await bot.sendMessage(
        chatId,
        formatMessage(TEXT.START.NEW_BUKASHKA),
        { parse_mode: "MarkdownV2" }
      );
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è userId
      waitingForName[userId] = { chatId: chatId, userName };
    } else if (userRequest === "–ø–æ–∏–≥—Ä–∞—Ç—å") {
      const bukashka = await petObject.getBukashka(userId);
      if (!bukashka) {
        await petObject.emptyPetMsg(chatId);
        return;
      }
      if (bukashka.isAdventuring) {
        await bot.sendMessage(
          chatId,
          formatMessage(TEXT.GAME.IN_ADVENTURE),
          { parse_mode: "MarkdownV2" }
        );
        return;
      }
      const lastGame = await petObject.getLastGameTime(userId);
      if (await checkInterval(lastGame, INTERVALS.GAME, 'game', chatId, bot)) return;

      await bot.sendMessage(
        chatId,
        formatMessage("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É"),
        {
          parse_mode: "MarkdownV2", reply_markup: {
            inline_keyboard: [
              [
                { text: "–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫", callback_data: "dice" },
                { text: "–ë–æ—É–ª–∏–Ω–≥", callback_data: "bowling" }
              ]
            ]
          }
        }
      );
    } else if (userRequest === "–ø–æ–∫–æ—Ä–º–∏—Ç—å") {
      const bukashka = await petObject.getBukashka(userId);
      if (!bukashka) {
        await petObject.emptyPetMsg(chatId);
        return;
      }

      if (bukashka.isAdventuring) {
        await bot.sendMessage(
          chatId,
          formatMessage(TEXT.FEED.IN_ADVENTURE),
          { parse_mode: "MarkdownV2" }
        );
        return;
      }

      const lastFeed = await petObject.getLastFeedTime(userId);
      if (await checkInterval(lastFeed, INTERVALS.FEED, 'feed', chatId, bot)) return;

      try {
        const feedResult = getFeedResult(bukashka.name);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await petObject.updateLastFeedTime(userId, new Date().toISOString());

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—ã—Ç–æ—Å—Ç—å –∏ —Å—á–∞—Å—Ç—å–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const newFeed = Math.max(0, Math.min(100, bukashka.feed + feedResult.amount));
        const newHappy = Math.max(0, Math.min(100, bukashka.happy + feedResult.happiness));

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await petObject.petsRef.child(userId).update({
          feed: newFeed,
          happy: newHappy
        });

        try {
          await bot.sendMessage(chatId, formatMessage(feedResult.message), {
            parse_mode: "MarkdownV2",
          });
        } catch (error) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
          await bot.sendMessage(chatId, feedResult.message.replace(/\\/g, ''));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–º–µ—Ä–ª–∞ –ª–∏ –±—É–∫–∞—à–∫–∞ –æ—Ç –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ–π –µ–¥—ã
        if (newFeed === 0 && feedResult.type === "–≥–æ–≤–Ω—è—à–∫–∞") {
          await petObject.killBukashka(userId, chatId, "–ü–æ–µ–ª–∞ –≥–æ–≤–Ω–∞ –∏ –ø–æ–º–µ—Ä–ª–∞ üò¢");
          return;
        }
      } catch (error) {
        console.error('Error while feeding:', error);
        await bot.sendMessage(chatId, TEXT.FEED.ERROR);
      }
    } else if (userRequest === "–º–æ—è –±—É–∫–∞—à–∫–∞") {
      const bukashka = await petObject.getBukashka(userId);
      if (bukashka) {
        await sendBukashkaInfo(chatId, userId, 0, 0, bot);
      } else {
        await petObject.emptyPetMsg(chatId);
      }
    } else if (userRequest === "–±—É–∫–∞—à–∫—É –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ") {
      const bukashka = await petObject.getBukashka(userId);
      if (!bukashka) {
        await petObject.emptyPetMsg(chatId);
        return;
      }

      if (bukashka.isAdventuring) {
        const timeLeft = await petObject.getAdventureTimeLeft(userId);
        await bot.sendMessage(
          chatId,
          formatMessage(TEXT.ADVENTURE.IN_PROGRESS(bukashka.name, formatTimeLeft(timeLeft))),
          { parse_mode: "MarkdownV2" }
        );
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ state –¥–ª—è batch-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
      const snapshot = await petObject.petsRef.child(userId).once('value');
      const bukashkaData = snapshot.val();
      const state = { ...(bukashkaData?.state || {}), userName };
      await petObject.petsRef.child(userId).update({ state });

      await petObject.startAdventure(userId, chatId, ADVENTURES);
    } else if (userRequest === "–≥–¥–µ –±—É–∫–∞—à–∫–∞") {
      const bukashka = await petObject.getBukashka(userId);
      if (!bukashka) {
        await petObject.emptyPetMsg(chatId);
        return;
      }

      let timeLeft = 0;
      if (bukashka.isAdventuring && bukashka.state && bukashka.state.adventureStartTime) {
        let adventureInterval = INTERVALS.ADVENTURE;
        if (bukashka.boost === 'adventure_boost') {
          adventureInterval = Math.floor(adventureInterval / 1.5);
        }
        const startTime = new Date(bukashka.state.adventureStartTime).getTime();
        const now = Date.now();
        timeLeft = Math.max(0, Math.floor((startTime + adventureInterval - now) / 1000));
      }

      await bot.sendMessage(
        chatId,
        formatMessage(TEXT.ADVENTURE.LOCATION(bukashka.name, bukashka.isAdventuring, formatTimeLeft(timeLeft))),
        { parse_mode: "MarkdownV2" }
      );
    } else if (userRequest === "—Ä–∞–∑–¥–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫—É") {
      const bukashka = await petObject.getBukashka(userId);
      if (bukashka) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º
        await petObject.killBukashka(userId, chatId, TEXT.STATUS.CRUSHED(bukashka.name));
      } else {
        await petObject.emptyPetMsg(chatId);
      }
    } else if (userRequest === "–º–∞–≥–∞–∑–∏–Ω") {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç –∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
      const bukashka = await petObject.getBukashka(userId);
      if (bukashka && bukashka.isAdventuring) {
        await bot.sendMessage(chatId, formatMessage(TEXT.SHOP.IN_ADVENTURE), { parse_mode: "MarkdownV2" });
        return;
      }
      let boostInfo = '';
      if (bukashka && bukashka.boost) {
        let boostName = '';
        if (bukashka.boost === 'adventure_boost') boostName = '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π';
        if (bukashka.boost === 'happy_boost') boostName = '–ë–æ–ª—å—à–µ —Å—á–∞—Å—Ç—å—è';
        if (bukashka.boost === 'feed_boost') boostName = '–ú–µ–Ω—å—à–µ –≥–æ–ª–æ–¥–∞';
        boostInfo = formatMessage(TEXT.SHOP.ACTIVE_INFO(boostName)) + '\n\n';
      }
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–∞–ª–∞–Ω—Å–æ–º –º–æ–Ω–µ—Ç
      let coinsInfo = '';
      if (bukashka) {
        coinsInfo = `\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${bukashka.coins || 0} –º–æ–Ω–µ—Ç ü™ô`;
      }
      await bot.sendMessage(
        chatId,
        formatMessage(TEXT.SHOP.WELCOME()) + `\n${coinsInfo}\n\n${boostInfo}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π", callback_data: "boost_adventure" },
                { text: "–ë–æ–ª—å—à–µ —Å—á–∞—Å—Ç—å—è", callback_data: "boost_happy" },
              ],
              [
                { text: "–ú–µ–Ω—å—à–µ –≥–æ–ª–æ–¥–∞", callback_data: "boost_feed" },
                { text: "–ö—Ä–æ–ª–∏–∫", callback_data: "shop_rabbit" }
              ],
              [
                { text: "–ö–∞–∑–∏–∫ üé∞", callback_data: "casino" }
              ]
            ]
          },
          parse_mode: "MarkdownV2"
        }
      );
    } else if (userRequest === "—Ä–µ–π—Ç–∏–Ω–≥") {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±—É–∫–∞—à–µ–∫ –∏–∑ –±–∞–∑—ã
      const snapshot = await petsRef.once('value');
      const pets = snapshot.val();
      if (!pets) {
        await bot.sendMessage(chatId, '–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –±—É–∫–∞—à–∫–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.');
        return;
      }
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é (level)
      const petList = Object.values(pets)
        .map(b => ({ name: b.name, level: b.level || 0 }))
        .sort((a, b) => (b.level || 0) - (a.level || 0))
        .slice(0, 20);
      if (petList.length === 0) {
        await bot.sendMessage(chatId, '–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –±—É–∫–∞—à–∫–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.');
        return;
      }
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
      const ratingText = petList.map((b, i) => {
        const lvl = getBukashkaLevel(b.level);
        const rest = b.level % 100;
        return `${i + 1}. ${b.name} - –£—Ä–æ–≤–µ–Ω—å ${lvl} (${rest}/100)`;
      }).join('\n');
      await bot.sendMessage(chatId, `üîù –¢–æ–ø –±—É–∫–∞—à–µ–∫ –≤–æ –≤—Å—ë–º –º–∏—Ä–µ:\n${ratingText}`);
    }
  } catch (error) {
    console.error(error);
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –±—É–∫–∞—à–∫–∏
bot.on("message", async (nameMsg) => {
  const userId = nameMsg.from.id;
  if (waitingForName[userId]) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç
    if (!nameMsg.text) {
      await bot.sendMessage(namechatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥");
      return;
    }
    const buakakaName = nameMsg.text;
    const { chatId, userName } = waitingForName[userId];
    await petObject.createBukashka(userId, chatId, buakakaName, DEFAULT_BUKASHKA, userName);
    await bot.sendMessage(
      chatId,
      formatMessage(TEXT.START.CONGRATULATIONS(buakakaName)),
      { parse_mode: "MarkdownV2" }
    );
    delete waitingForName[userId];
  }
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ –∏ gif-–∞–Ω–∏–º–∞—Ü–∏–π
async function handlePetMedia(msg, type) {
  try {
    const userId = msg.from.id;
    let file_id;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: –µ—Å–ª–∏ –Ω–µ photo/animation, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (type === 'photo') {
      if (!msg.photo) return; // –û–∂–∏–¥–∞–ª–∏ —Ñ–æ—Ç–æ, –∞ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
      file_id = msg.photo[msg.photo.length - 1].file_id;
    } else if (type === 'gif') {
      if (!msg.animation) return; // –û–∂–∏–¥–∞–ª–∏ gif, –∞ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
      file_id = msg.animation.file_id;
    } else {
      return;
    }
    const bukashka = await petObject.getBukashka(userId);
    if (!bukashka) {
      await petObject.emptyPetMsg(chatId);
      return;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –∂–¥—ë—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (waitingForPhoto[userId] && msg.from.id === userId) {
      await petObject.updloadPetImage(userId, { file_id, type });
      await sendBukashkaInfo(chatId, userId, 0, 0, bot);
      waitingForPhoto[userId] = false;
    }
    // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  } catch (error) {
    console.error(error);
  }
}

bot.on("photo", async (msg) => {
  await handlePetMedia(msg, 'photo');
});

bot.on("animation", async (msg) => {
  await handlePetMedia(msg, 'gif');
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const bukashka = await petObject.getBukashka(userId);

  if (!bukashka) {
    bot.answerCallbackQuery(query.id, { text: TEXT.STATUS.NO_BUKASHKA });
    return;
  }

  if (query.data === "adventure_risk") {
    bot.answerCallbackQuery(query.id);
    await petObject.startAdventure(userId, chatId, ADVENTURES);
    return;
  } else if (query.data === "adventure_cancel") {
    bot.answerCallbackQuery(query.id);
    bot.deleteMessage(chatId, query.message.message_id);
    await bot.sendMessage(
      chatId,
      formatMessage(TEXT.ADVENTURE.CANCEL(bukashka.name)),
      { parse_mode: "MarkdownV2" }
    );
  } else if (query.data === "dice" || query.data === "bowling") {
    bot.answerCallbackQuery(query.id);
    await bot.deleteMessage(chatId, query.message.message_id);
    const lastGame = await petObject.getLastGameTime(userId);
    if (await checkInterval(lastGame, INTERVALS.GAME, 'game', chatId, bot)) return;
    const { dice } = await bot.sendDice(chatId, { emoji: query.data === "dice" ? "üé≤" : "üé≥" });
    const pet = await petObject.getBukashka(userId);
    await handleGameAction({
      bot,
      chatId,
      userId,
      pet,
      petsRef: petObject.petsRef,
      TEXT,
      value: dice.value
    });
    await petObject.updateLastGameTime(userId, new Date().toISOString());
    return;
  } else if (query.data === "boost_adventure" || query.data === "boost_happy" || query.data === "boost_feed") {
    if (bukashka && bukashka.isAdventuring) {
      await bot.sendMessage(chatId, formatMessage(TEXT.SHOP.IN_ADVENTURE), { parse_mode: "MarkdownV2" });
      return;
    }
    bot.answerCallbackQuery(query.id);
    let boostType = null;
    let price = 0;
    let boostText = '';
    if (query.data === "boost_adventure") { boostType = "adventure_boost"; price = SHOP_PRICES.adventure_boost; boostText = '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π'; }
    if (query.data === "boost_happy") { boostType = "happy_boost"; price = SHOP_PRICES.happy_boost; boostText = '–ë–æ–ª—å—à–µ —Å—á–∞—Å—Ç—å—è'; }
    if (query.data === "boost_feed") { boostType = "feed_boost"; price = SHOP_PRICES.feed_boost; boostText = '–ú–µ–Ω—å—à–µ –≥–æ–ª–æ–¥–∞'; }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Ç–æ—Ç –∂–µ –±—É—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (bukashka && bukashka.boost === boostType) {
      await bot.sendMessage(chatId, formatMessage(TEXT.SHOP.ALREADY_THIS_BOOST(boostText)), { parse_mode: "MarkdownV2" });
      return;
    }
    const success = await petObject.setBoost(userId, boostType, price);
    if (success === true) {
      await bot.sendMessage(chatId, formatMessage(TEXT.SHOP.SUCCESS(boostText, price) + '\n\n' + TEXT.SHOP.BOOST_INFO(boostType)), { parse_mode: "MarkdownV2" });
    } else if (success && success.replaced) {
      let oldBoostName = '';
      if (success.replaced === 'adventure_boost') oldBoostName = '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π';
      if (success.replaced === 'happy_boost') oldBoostName = '–ë–æ–ª—å—à–µ —Å—á–∞—Å—Ç—å—è';
      if (success.replaced === 'feed_boost') oldBoostName = '–ú–µ–Ω—å—à–µ –≥–æ–ª–æ–¥–∞';
      await bot.sendMessage(chatId, formatMessage(TEXT.SHOP.REPLACED_BOOST(oldBoostName, boostText, price) + '\n\n' + TEXT.SHOP.BOOST_INFO(boostType)), { parse_mode: "MarkdownV2" });
    } else if (success && success.already) {
      let boostName = '';
      if (success.current === 'adventure_boost') boostName = '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π';
      if (success.current === 'happy_boost') boostName = '–ë–æ–ª—å—à–µ —Å—á–∞—Å—Ç—å—è';
      if (success.current === 'feed_boost') boostName = '–ú–µ–Ω—å—à–µ –≥–æ–ª–æ–¥–∞';
      await bot.sendMessage(chatId, formatMessage(TEXT.SHOP.ALREADY_BOOST(boostName)), { parse_mode: "MarkdownV2" });
    } else {
      await bot.sendMessage(chatId, formatMessage(TEXT.SHOP.NOT_ENOUGH), { parse_mode: "MarkdownV2" });
    }
    return;
  } else if (query.data === "shop_rabbit") {
    bot.answerCallbackQuery(query.id);
    const bukashka = await petObject.getBukashka(userId);
    if (bukashka && bukashka.isAdventuring) {
      await bot.sendMessage(chatId, formatMessage(TEXT.SHOP.IN_ADVENTURE), { parse_mode: "MarkdownV2" });
      return;
    }
    if (!bukashka) {
      await petObject.emptyPetMsg(chatId);
      return;
    }
    if ((bukashka.coins || 0) < SHOP_PRICES.rabbit) {
      await bot.sendMessage(chatId, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–æ–ª–∏–∫–∞!');
      return;
    }
    const happyAdd = Math.floor(Math.random() * 8) + 8; // 8-15
    const newHappy = Math.min(100, (bukashka.happy || 0) + happyAdd);
    await petObject.petsRef.child(userId).update({
      coins: (bukashka.coins || 0) - SHOP_PRICES.rabbit,
      happy: newHappy
    });
    await bot.sendSticker(chatId, STICKERS.RABBIT[Math.floor(Math.random() * STICKERS.RABBIT.length)])
    await bot.sendMessage(chatId, `${TEXT.SHOP.RABBIT_SUCCESS}\n\n–°—á–∞—Å—Ç—å–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å: ${newHappy} (+${happyAdd})`);
    return;
  } else if (query.data === "casino") {
    bot.answerCallbackQuery(query.id);
    if (bukashka && bukashka.isAdventuring) {
      await bot.sendMessage(chatId, formatMessage(TEXT.SHOP.IN_ADVENTURE), { parse_mode: "MarkdownV2" });
      return;
    }
    if ((bukashka.coins || 0) < SHOP_PRICES.PRICE) {
      await bot.sendMessage(chatId, TEXT.CASINO.NOT_ENOUGH(SHOP_PRICES.PRICE));
      return;
    }
    await petObject.petsRef.child(userId).update({ coins: bukashka.coins - SHOP_PRICES.PRICE });
    const { dice } = await bot.sendDice(chatId, { emoji: "üé∞" });
    setTimeout(async () => {
      if (dice.value === 64) {
        const updatedSnapshot = await petObject.petsRef.child(userId).once('value');
        const updatedBukashka = updatedSnapshot.val();
        const safeHappy = Number.isFinite(updatedBukashka.happy) ? updatedBukashka.happy : 0;
        await petObject.petsRef.child(userId).update({
          coins: updatedBukashka.coins + SHOP_PRICES.JACKPOT.coins,
          happy: Math.min(100, safeHappy + SHOP_PRICES.JACKPOT.happy)
        });
        await bot.sendMessage(chatId, TEXT.CASINO.JACKPOT(SHOP_PRICES.JACKPOT));
      } else if ([1, 22, 43].includes(dice.value)) {
        // 1 === "bar bar bar"
        // 22 === "berry berry berry"
        // 43 === "lemon lemon lemon"
        const updatedSnapshot = await petObject.petsRef.child(userId).once('value');
        const updatedBukashka = updatedSnapshot.val();
        const safeHappy = Number.isFinite(updatedBukashka.happy) ? updatedBukashka.happy : 0;
        await petObject.petsRef.child(userId).update({
          coins: updatedBukashka.coins + SHOP_PRICES.WIN.coins,
          happy: Math.min(100, safeHappy + SHOP_PRICES.WIN.happy)
        });
        await bot.sendMessage(chatId, TEXT.CASINO.WIN(SHOP_PRICES.WIN));
      } else {
        await bot.sendMessage(chatId, TEXT.CASINO.LOSE);
      }
    }, 2000);
    return;
  }
});
