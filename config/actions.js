const { TEXT } = require('./text');
const { formatTimeLeft, escapeMarkdown, formatMessage } = require('../utils/helpers');
const admin = require('firebase-admin');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—É–∫–∞—à–∫–µ
const formatBukashkaInfo = (bukashka, feedChange = 0, happinessChange = 0) => {
  const feedDisplay = feedChange
    ? `${bukashka.feed} (${feedChange > 0 ? '+' : ''}${feedChange})`
    : bukashka.feed;

  const happinessDisplay = happinessChange
    ? `${bukashka.happy} (${happinessChange > 0 ? '+' : ''}${happinessChange})`
    : bukashka.happy;

  // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –±—É–∫–∞—à–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const now = new Date();
  const creationDate = new Date(bukashka.creationDate);
  const ageInSeconds = Math.floor((now - creationDate) / 1000);

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—É—Å—Ç–µ
  let boostInfo = '';
  if (bukashka.boost) {
    let boostName = '';
    if (bukashka.boost === 'adventure_boost') boostName = '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π';
    if (bukashka.boost === 'happy_boost') boostName = '–ë–æ–ª—å—à–µ —Å—á–∞—Å—Ç—å—è';
    if (bukashka.boost === 'feed_boost') boostName = '–ú–µ–Ω—å—à–µ –≥–æ–ª–æ–¥–∞';
    boostInfo = `\n*–ê–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç:* ${boostName}`;
  }

  // –§–æ—Ä–º–∞—Ç —É—Ä–æ–≤–Ω—è
  const lvl = Math.floor((bukashka.level || 0) / 100);
  const lvlRest = (bukashka.level || 0) % 100;
  const levelDisplay = `${lvl} —É—Ä–æ–≤–µ–Ω—å (${lvlRest}/100)`;

  return formatMessage(`
‚ú® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –±—É–∫–∞—à–∫–µ! üêõ

*–ò–º—è:* ${bukashka.name}
*–í–æ–∑—Ä–∞—Å—Ç:* ${formatTimeLeft(ageInSeconds)}
*–£—Ä–æ–≤–µ–Ω—å:* ${levelDisplay}
*–°—ã—Ç–æ—Å—Ç—å:* ${feedDisplay} üå±
*–°—á–∞—Å—Ç—å–µ:* ${happinessDisplay} üòä
*–ú–æ–Ω–µ—Ç–∫–∏:* ${bukashka.coins || 0} ü™ô
*–°—Ç–∞—Ç—É—Å:* ${bukashka.isAdventuring ? '–í –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏! üß≠' : '–î–æ–º–∞ üè°'}${boostInfo}

${feedChange || happinessChange
      ? TEXT.FEED.THANKS
      : TEXT.FEED.HAPPY
    }
  `);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—É–∫–∞—à–∫–µ
const sendBukashkaInfo = async (chatId, bukashka, feedChange = 0, happinessChange = 0, bot) => {
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Firebase
  const petsRef = admin.database().ref('pets');
  const snapshot = await petsRef.child(chatId).once('value');
  const currentBukashka = snapshot.val() || bukashka;

  const message = formatBukashkaInfo(currentBukashka, feedChange, happinessChange);

  if (currentBukashka.image) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –±—É–∫–∞—à–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    await bot.sendPhoto(chatId, currentBukashka.image, {
      caption: message,
      parse_mode: "MarkdownV2",
    });
  } else {
    // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await bot.sendMessage(chatId, message, {
      parse_mode: "MarkdownV2",
    });
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –±—É–∫–∞—à–∫–∏
const calculateAge = (creationDate) => {
  const now = new Date();
  const creation = new Date(creationDate);
  const ageDiff = now - creation;

  const minutes = Math.floor(ageDiff / (1000 * 60));
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);

  if (days > 0) {
    const remainingHours = hours % 24;
    return `${days} –¥–Ω. ${remainingHours} —á.`;
  } else if (hours > 0) {
    const remainingMinutes = minutes % 60;
    return `${hours} —á. ${remainingMinutes} –º–∏–Ω.`;
  } else {
    return `${minutes} –º–∏–Ω.`;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è
const getFeedResult = (bukashkaName) => {
  const random = Math.random() * 100; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100

  if (random < 5) {
    return {
      type: "–≥–æ–≤–Ω—è—à–∫–∞",
      amount: -5,
      happiness: -10,
      message: formatMessage(TEXT.FEED.BAD_FOOD(bukashkaName)),
    };
  } else if (random < 60) {
    return {
      type: "–≤–æ–¥–∏—á–∫—É",
      amount: 5,
      happiness: 0,
      message: formatMessage(TEXT.FEED.WATER(bukashkaName)),
    };
  } else if (random < 90) {
    return {
      type: "–ª–∏—Å—Ç–∏–∫",
      amount: 10,
      happiness: 5,
      message: formatMessage(TEXT.FEED.LEAF(bukashkaName)),
    };
  } else {
    return {
      type: "—è–±–ª–æ—á–∫–æ",
      amount: 20,
      happiness: 15,
      message: formatMessage(TEXT.FEED.APPLE(bukashkaName)),
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
const normalizeCommand = (text) => {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤, –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  return text.toLowerCase().replace(/[^–∞-—è—ëa-z0-9\s]/gi, '').trim();
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
const checkInterval = async (lastTime, interval, actionName, chatId, bot) => {
  const now = Date.now();
  if (now - lastTime < interval) {
    const left = Math.ceil((interval - (now - lastTime)) / 1000);
    let msg = '';
    switch (actionName) {
      case 'feed':
        msg = `–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ ${formatTimeLeft(left)} –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ—Ä–º–ª–µ–Ω–∏–µ–º! ‚è≥`;
        break;
      case 'game':
        msg = `–ü–æ–∏–≥—Ä–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É!\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ ${formatTimeLeft(left)}`;
        break;
      default:
        msg = `–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ ${formatTimeLeft(left)} –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.`;
    }
    await bot.sendMessage(chatId, formatMessage(msg), { parse_mode: "MarkdownV2" });
    return true;
  }
  return false;
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∏–Ω–∏-–∏–≥—Ä (dice, bowling)
const handleGameAction = async (bot, chatId, pet, petsRef, formatMessage, TEXT, gameType, value) => {
  let happyChange = 0;
  let coinsChange = 0;
  let msg = '';
    switch (value) {
      case 1:
        happyChange = -5;
        break;
      case 2:
        happyChange = -3;
        break;
      case 3:
        happyChange = 0;
        break;
      case 4:
        happyChange = 3;
        break;
      case 5:
        happyChange = 5;
        coinsChange = Math.floor(Math.random() * 5) + 2;
        break;
      case 6:
        happyChange = 6;
        coinsChange = Math.floor(Math.random() * 10) + 5;
        break;
    }
    msg = TEXT.GAME.DICE_RESULT(value, happyChange, coinsChange);
  if (pet) {
    const newHappy = Math.max(0, Math.min(100, (pet.happy || 0) + happyChange));
    const newCoins = (pet.coins || 0) + coinsChange;
    await petsRef.child(pet.userId || chatId).update({
      happy: newHappy,
      coins: newCoins
    });
    setTimeout(async () => {
      await bot.sendMessage(chatId, formatMessage(msg), { parse_mode: "MarkdownV2" });
    }, 3500);
  }
  return { happyChange, coinsChange, msg };
};

module.exports = {
  formatTimeLeft,
  escapeMarkdown,
  formatMessage,
  formatBukashkaInfo,
  sendBukashkaInfo,
  calculateAge,
  getFeedResult,
  normalizeCommand,
  checkInterval,
  handleGameAction
};
